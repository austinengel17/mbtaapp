{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nvar backendHost = \"localhost:8080/\";\nvar controllerEndpoint = \"mbta/v1/livemap\";\nvar vehiclePositionSub = \"/vehicle/location/Green-E\";\nvar mbtaStopsEndpoint = \"/stops/line/Green-E\";\nfunction Vehicles(_ref) {\n  _s();\n  let {\n    svgRef,\n    stationData,\n    stationMapping\n  } = _ref;\n  const [vehicleList, setVehicleList] = useState([]);\n  useEffect(() => {\n    const svg = svgRef.current;\n    var svgElement = d3.select(svg);\n    console.log(\"vdata \", vehicleList);\n    svgElement.selectAll(\"group.vehicle-group\").data(vehicleList, d => d.id).join(enter => {\n      enter.append(\"g\").attr(\"class\", \"vehicle-group\");\n      enter.append(\"text\").attr(\"class\", \"vehicle\")\n      // .attr(\"key\", d=>d.id)\n      .attr(\"x\", function (d, i) {\n        return 30 + i * 130;\n      }).attr(\"y\", 300).attr(\"font-size\", 5).text(function (d) {\n        return d.id + \" - \" + d.currentStatus;\n      });\n      enter.append(\"rect\").attr(\"x\", function (d, i) {\n        var stopId = d.stopId;\n        var stopName = stationMapping[stopId];\n        var station = svgElement.selectAll(\"#\" + stopName);\n        var circlePosition = station.node().getBoundingClientRect();\n        return +circlePosition.left + window.pageXOffset;\n      }).attr(\"y\", 150).attr(\"width\", 5).attr(\"height\", 5);\n    }, update => {\n      update.select(\"text\").attr(\"x\", function (d, i) {\n        return 30 + i * 130;\n      }).text(function (d) {\n        var stopId = d.stopId;\n        var stopName = stationMapping[stopId];\n        console.log(\"station mapping .. \", stationMapping, \" , \", stopName, \" , \", stopId);\n        return d.id + \" - \" + d.currentStatus + ' - ' + stationMapping[stopId];\n      });\n      update.select(\"rect\").attr(\"x\", function (d, i) {\n        var stopId = d.stopId;\n        var stopName = stationMapping[stopId];\n        var station = svgElement.selectAll(\"#\" + stopName);\n        var circlePosition = station.node().getBoundingClientRect();\n        return +circlePosition.left + window.pageXOffset;\n      }).attr(\"y\", 150);\n    }, exit => {\n      exit.select(\"g.vehicle-group\").remove();\n      // exit.remove(); \n      // exit.select(\"text\").remove();\n      // exit.select(\"rect\").remove();\n    });\n  }, [vehicleList]);\n\n  //Load vehicles below\n  useEffect(() => {\n    const evtSource = new EventSource(\"http://\" + backendHost + controllerEndpoint + vehiclePositionSub);\n    evtSource.onmessage = data => {\n      var eventData = JSON.parse(data.data);\n      var vehicleData = eventData.vehicleData;\n      if (eventData.event == \"reset\") {\n        console.log(\"reset\");\n        setVehicleList(vehicleData);\n      } else if (eventData.event == \"update\") {\n        setVehicleList(prevList => {\n          var newData = prevList.map(item => {\n            if (item.id === vehicleData[0].id && !(item.currentStatus === vehicleData[0].currentStatus)) {\n              return vehicleData[0];\n            }\n            return item;\n          });\n          console.log(\"update\", newData);\n          return newData;\n        });\n        // setVehicleList(vehicleData);\n      }\n    };\n\n    evtSource.onerror = function (error) {\n      console.error('EventSource error:', error);\n    };\n    //close out event subscription on close of component\n    return () => {\n      evtSource.close();\n    };\n  }, []);\n}\n_s(Vehicles, \"O5rYaccuuWUrmMdgP7AwnaNzsfc=\");\n_c = Vehicles;\nexport default Vehicles;\nvar _c;\n$RefreshReg$(_c, \"Vehicles\");","map":{"version":3,"names":["useState","useEffect","d3","backendHost","controllerEndpoint","vehiclePositionSub","mbtaStopsEndpoint","Vehicles","_ref","_s","svgRef","stationData","stationMapping","vehicleList","setVehicleList","svg","current","svgElement","select","console","log","selectAll","data","d","id","join","enter","append","attr","i","text","currentStatus","stopId","stopName","station","circlePosition","node","getBoundingClientRect","left","window","pageXOffset","update","exit","remove","evtSource","EventSource","onmessage","eventData","JSON","parse","vehicleData","event","prevList","newData","map","item","onerror","error","close","_c","$RefreshReg$"],"sources":["/Users/austin/Dev Projects/mbtaapp/mbta-frontend/src/Vehicles.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\n\n\nvar backendHost = \"localhost:8080/\";\nvar controllerEndpoint = \"mbta/v1/livemap\";\nvar vehiclePositionSub = \"/vehicle/location/Green-E\";\nvar mbtaStopsEndpoint = \"/stops/line/Green-E\";\n\nfunction Vehicles({ svgRef, stationData, stationMapping}) { \n    const [vehicleList, setVehicleList] = useState([]);\n\n    useEffect(() => {\n      const svg = svgRef.current;\n      var svgElement = d3.select(svg);\n       console.log(\"vdata \", vehicleList);\n      svgElement.selectAll(\"group.vehicle-group\")\n      .data(vehicleList, d=>d.id)\n      .join(\n        (enter) => {\n          enter.append(\"g\")\n          .attr(\"class\", \"vehicle-group\")\n          enter\n          .append(\"text\")\n          .attr(\"class\", \"vehicle\")\n          // .attr(\"key\", d=>d.id)\n          .attr(\"x\", function(d,i){return 30 + i * 130})\n          .attr(\"y\", 300)\n          .attr(\"font-size\", 5)\n          .text(function(d){return d.id + \" - \" + d.currentStatus});\n          enter.append(\"rect\")\n            .attr(\"x\", function(d,i){\n              var stopId = d.stopId;\n              var stopName = stationMapping[stopId];\n              var station = svgElement.selectAll(\"#\" + stopName)\n              var circlePosition = station.node().getBoundingClientRect();\n              return +circlePosition.left + window.pageXOffset;\n            })\n            .attr(\"y\",150)\n            .attr(\"width\", 5)\n            .attr(\"height\", 5);\n      },\n      (update) => {\n        update\n        .select(\"text\")\n        .attr(\"x\", function(d,i){return 30 + i * 130})\n        .text(function(d){\n          var stopId = d.stopId;\n          var stopName = stationMapping[stopId];\n          console.log(\"station mapping .. \", stationMapping , \" , \" , stopName , \" , \" , stopId);\n          return d.id + \" - \" + d.currentStatus + ' - ' + stationMapping[stopId];\n\n        });\n        update\n        .select(\"rect\")\n        .attr(\"x\", function(d, i) {\n          var stopId = d.stopId;\n          var stopName = stationMapping[stopId];\n          var station = svgElement.selectAll(\"#\" + stopName);\n          var circlePosition = station.node().getBoundingClientRect();\n          return +circlePosition.left + window.pageXOffset;\n        })\n        .attr(\"y\", 150);\n      },\n      (exit) => {\n        exit\n        .select(\"g.vehicle-group\")\n        .remove();\n        // exit.remove(); \n        // exit.select(\"text\").remove();\n        // exit.select(\"rect\").remove();\n    } \n      );\n    }, [vehicleList]);\n\n    //Load vehicles below\n    useEffect(() => {\n      const evtSource = new EventSource(\"http://\" + backendHost + controllerEndpoint + vehiclePositionSub);\n      evtSource.onmessage = (data) => {\n        var eventData = JSON.parse(data.data);\n        var vehicleData = eventData.vehicleData;\n        if(eventData.event == \"reset\"){\n          console.log(\"reset\");\n          setVehicleList(vehicleData);\n        } else if(eventData.event == \"update\"){\n          setVehicleList((prevList) => {\n          var newData = prevList.map((item) => {\n            if (item.id === vehicleData[0].id && !(item.currentStatus === vehicleData[0].currentStatus)) {\n              return vehicleData[0];\n            }\n            return item;\n          });\n          console.log(\"update\", newData);\n          return newData;\n        });\n        // setVehicleList(vehicleData);\n        }\n\n      };\n      evtSource.onerror = function (error) {\n        console.error('EventSource error:', error);\n      };\n      //close out event subscription on close of component\n      return () => {\n        evtSource.close();\n      };\n    },[]);\n}\n\n\n\nexport default Vehicles;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}