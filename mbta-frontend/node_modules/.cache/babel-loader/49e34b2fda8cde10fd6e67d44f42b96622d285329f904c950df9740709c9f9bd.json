{"ast":null,"code":"var _jsxFileName = \"/Users/austin/Dev Projects/mbtaapp/mbta-frontend/src/Map.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar splitData = require('./split_data.json');\nconsole.log(\"splitData : \", splitData);\nvar backendHost = \"localhost:8080/\";\nvar controllerEndpoint = \"mbta/v1/livemap\";\nvar vehiclePositionSub = \"/vehicle/location/Red\";\nvar mbtaStopsEndpoint = \"/stops/line/Red\";\nfunction Map() {\n  _s();\n  console.log(\"#80\");\n  function createSVGMap() {\n    addStops();\n  }\n  const [event, setEvent] = useState(\"hi\");\n  //Load stops first\n  //Load lines next\n\n  //Load vehicles below\n  useEffect(() => {\n    const evtSource = new EventSource(\"http://\" + backendHost + controllerEndpoint + vehiclePositionSub);\n    evtSource.onmessage = data => {\n      setEvent(data.data);\n    };\n    evtSource.onerror = function (error) {\n      console.error('EventSource error:', error);\n    };\n    //close out event subscription on close of component\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Map\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      height: \"1000\",\n      width: \"10000\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this), createSVGMap(), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Recent Event is \", event]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_s(Map, \"OLBBC44Jd//93K/9ozexQsziZ4A=\");\n_c = Map;\nfunction addStops() {\n  var xhr = new XMLHttpRequest();\n\n  // Making our connection \n  var url = \"http://\" + backendHost + controllerEndpoint + mbtaStopsEndpoint;\n  xhr.open(\"GET\", url, true);\n\n  // function execute after request is successful\n  xhr.onreadystatechange = function () {\n    if (this.readyState == 4 && this.status == 200) {\n      console.log(JSON.parse(this.responseText));\n      // this.responseText\n      var temp = JSON.parse(this.responseText);\n      var stationData = Object.keys(temp).map(v => ({\n        [v.replace(/['\"]+/g, '')]: {\n          ...temp[v]\n        }\n      }));\n      var lineYAxis = 150;\n      console.log(stationData);\n      var svg = d3.select(\"svg\");\n      var stopGroup = svg.selectAll(\"g\").data(stationData).enter().append(\"g\").attr(\"transform\", function (d, i) {\n        if (Object.keys(d)[0] == splitData[0].splitStart) {\n          lineYAxis += 100;\n          return \"translate(\" + (10 + i * 40 - 40) + \", \" + lineYAxis + \")\";\n        }\n        return \"translate(\" + (10 + i * 40) + \", \" + lineYAxis + \")\";\n      });\n\n      //To put in real time coordinates use below reference\n      // .attr(\"transform\", function(d, i) { console.log(d); return \"translate(\" + (250 - (((d[Object.keys(d)[0]].longitude - bostonBoundaries[\"easternBoundary\"])/longitudeRange) * 250))  + \", \" + (250 - (((d[Object.keys(d)[0]].latitude - bostonBoundaries[\"southernBoundary\"])/latitudeRange) * 250)) + \")\"; });\n\n      stopGroup.append(\"circle\").attr(\"cx\", 0).attr(\"cy\", 0).attr(\"r\", 2).attr(\"fill\", \"red\").attr(\"class\", d => Object.keys(d)[0]);\n      stopGroup.append(\"text\").text(function (d) {\n        return d[Object.keys(d)[0]].name;\n      }).attr(\"width\", 100).attr(\"x\", 0) // Set the x-coordinate\n      .attr(\"y\", -10).attr(\"text-anchor\", \"middle\").attr(\"font-size\", 5);\n      console.log(\"hellohi\");\n    }\n  };\n  xhr.onerror = function (error) {\n    console.error(error);\n  };\n  xhr.send();\n  console.log(\"sent\");\n}\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["useState","useEffect","d3","jsxDEV","_jsxDEV","splitData","require","console","log","backendHost","controllerEndpoint","vehiclePositionSub","mbtaStopsEndpoint","Map","_s","createSVGMap","addStops","event","setEvent","evtSource","EventSource","onmessage","data","onerror","error","className","children","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","xhr","XMLHttpRequest","url","open","onreadystatechange","readyState","status","JSON","parse","responseText","temp","stationData","Object","keys","map","v","replace","lineYAxis","svg","select","stopGroup","selectAll","enter","append","attr","d","i","splitStart","text","name","send","$RefreshReg$"],"sources":["/Users/austin/Dev Projects/mbtaapp/mbta-frontend/src/Map.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nvar splitData = require('./split_data.json');\nconsole.log(\"splitData : \", splitData);\n\n\n\nvar backendHost = \"localhost:8080/\";\nvar controllerEndpoint = \"mbta/v1/livemap\";\nvar vehiclePositionSub = \"/vehicle/location/Red\";\nvar mbtaStopsEndpoint = \"/stops/line/Red\"\nfunction Map() {    console.log(\"#80\");\n\n    function createSVGMap(){\n      addStops();\n    }\n\n    const[event, setEvent] = useState(\"hi\");\n    //Load stops first\n    //Load lines next\n\n    //Load vehicles below\n    useEffect(() => {\n      const evtSource = new EventSource(\"http://\" + backendHost + controllerEndpoint + vehiclePositionSub);\n      evtSource.onmessage = (data) => {\n        setEvent(data.data);\n      };\n      evtSource.onerror = function (error) {\n        console.error('EventSource error:', error);\n      };\n      //close out event subscription on close of component\n    },[]);\n\n      return (\n        <div className=\"Map\">\n          <svg height=\"1000\" width=\"10000\"></svg>\n          {createSVGMap()}\n          <h1>Recent Event is {event}</h1>\n        </div> \n      );\n}\n\n\nfunction addStops(){\n  var xhr = new XMLHttpRequest();\n \n    // Making our connection \n    var url = \"http://\" + backendHost + controllerEndpoint + mbtaStopsEndpoint;\n    xhr.open(\"GET\", url, true);\n \n    // function execute after request is successful\n    xhr.onreadystatechange = function () {\n        if (this.readyState == 4 && this.status == 200) {\n            console.log(JSON.parse(this.responseText));\n            // this.responseText\n            var temp = JSON.parse(this.responseText);\n            var stationData = Object.keys(temp).map(v => ({[v.replace(/['\"]+/g, '')]: {...temp[v]}}));\n            var lineYAxis = 150;\n            console.log(stationData);\n            var svg = d3.select(\"svg\");\n            var stopGroup = svg.selectAll(\"g\")\n            .data(stationData)\n            .enter()\n            .append(\"g\")\n            .attr(\"transform\", function(d, i) {\n              if((Object.keys(d)[0]) == splitData[0].splitStart){\n                lineYAxis+=100;\n                return \"translate(\" + (10 + i * 40 - 40) + \", \" + (lineYAxis) + \")\"; \n\n              }\n              return \"translate(\" + (10 + i * 40) + \", \" + (lineYAxis) + \")\"; \n            });\n            \n            //To put in real time coordinates use below reference\n            // .attr(\"transform\", function(d, i) { console.log(d); return \"translate(\" + (250 - (((d[Object.keys(d)[0]].longitude - bostonBoundaries[\"easternBoundary\"])/longitudeRange) * 250))  + \", \" + (250 - (((d[Object.keys(d)[0]].latitude - bostonBoundaries[\"southernBoundary\"])/latitudeRange) * 250)) + \")\"; });\n            \n            stopGroup.append(\"circle\")\n              .attr(\"cx\", 0)\n              .attr(\"cy\", 0)\n              .attr(\"r\", 2)\n              .attr(\"fill\", \"red\")\n              .attr(\"class\", d=>Object.keys(d)[0]);\n\n             stopGroup.append(\"text\")\n                .text(function(d) {\n                  return d[Object.keys(d)[0]].name;})\n                .attr(\"width\", 100)\n                .attr(\"x\", 0) // Set the x-coordinate\n                .attr(\"y\", -10)\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"font-size\", 5);\n\n                console.log(\"hellohi\")\n        }\n      }\n    xhr.onerror = function (error){\n      console.error(error);\n    };\n    xhr.send();\n    console.log(\"sent\");\n}\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}