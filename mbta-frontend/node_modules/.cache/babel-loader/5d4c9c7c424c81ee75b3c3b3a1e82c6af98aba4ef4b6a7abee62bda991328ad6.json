{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nvar backendHost = \"localhost:8080/\";\nvar controllerEndpoint = \"mbta/v1/livemap\";\nvar vehiclePositionSub = \"/vehicle/location/Green-E\";\nvar mbtaStopsEndpoint = \"/stops/line/Green-E\";\nfunction Vehicles(_ref) {\n  _s();\n  let {\n    svgRef\n  } = _ref;\n  const [vehicleList, setVehicleList] = useState([]);\n  useEffect(() => {\n    const svg = svgRef.current;\n    var svgElement = d3.select(svg);\n    svgElement.selectAll(\"circle.vehicle\").data(vehicleList).join(enter => {\n      enter.append(\"circle\").attr(\"cx\", function (d, i) {\n        return 30 + i * 40;\n      }).attr(\"cy\", 300).attr(\"r\", 5);\n    }, update => {\n      update.attr(\"class\", \"updated\");\n    }, exit => {\n      exit.remove(); // Remove the entire vehicle-group element\n    });\n  }, [vehicleList]);\n\n  //Load vehicles below\n  useEffect(() => {\n    const evtSource = new EventSource(\"http://\" + backendHost + controllerEndpoint + vehiclePositionSub);\n    evtSource.onmessage = data => {\n      var eventData = JSON.parse(data.data);\n      var vehicleData = eventData.vehicleData;\n      console.log(\"vdata \", vehicleData);\n      if (eventData.event == \"reset\") {\n        console.log(\"reset\");\n        setVehicleList(vehicleData);\n      }\n      if (eventData.event == \"update\") {\n        console.log(\"update\");\n        setVehicleList(vehicleData[0]);\n      }\n    };\n    evtSource.onerror = function (error) {\n      console.error('EventSource error:', error);\n    };\n    //close out event subscription on close of component\n    return () => {\n      evtSource.close();\n    };\n  }, []);\n}\n_s(Vehicles, \"O5rYaccuuWUrmMdgP7AwnaNzsfc=\");\n_c = Vehicles;\nexport default Vehicles;\nvar _c;\n$RefreshReg$(_c, \"Vehicles\");","map":{"version":3,"names":["useState","useEffect","d3","backendHost","controllerEndpoint","vehiclePositionSub","mbtaStopsEndpoint","Vehicles","_ref","_s","svgRef","vehicleList","setVehicleList","svg","current","svgElement","select","selectAll","data","join","enter","append","attr","d","i","update","exit","remove","evtSource","EventSource","onmessage","eventData","JSON","parse","vehicleData","console","log","event","onerror","error","close","_c","$RefreshReg$"],"sources":["/Users/austin/Dev Projects/mbtaapp/mbta-frontend/src/Vehicles.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\n\n\nvar backendHost = \"localhost:8080/\";\nvar controllerEndpoint = \"mbta/v1/livemap\";\nvar vehiclePositionSub = \"/vehicle/location/Green-E\";\nvar mbtaStopsEndpoint = \"/stops/line/Green-E\";\n\nfunction Vehicles({ svgRef }) { \n    const [vehicleList, setVehicleList] = useState([]);\n\n    useEffect(() => {\n      const svg = svgRef.current;\n      var svgElement = d3.select(svg);\n      svgElement.selectAll(\"circle.vehicle\")\n      .data(vehicleList)\n      .join(\n        (enter) => {\n          enter\n          .append(\"circle\")\n          .attr(\"cx\", function(d,i){return 30 + i * 40})\n          .attr(\"cy\", 300)\n          .attr(\"r\", 5);\n\n      },\n      (update) => {\n        update.attr(\"class\", \"updated\");\n      },\n      (exit) => {\n        exit.remove(); // Remove the entire vehicle-group element\n    } \n      );\n    }, [vehicleList]);\n\n    //Load vehicles below\n    useEffect(() => {\n      const evtSource = new EventSource(\"http://\" + backendHost + controllerEndpoint + vehiclePositionSub);\n      evtSource.onmessage = (data) => {\n        var eventData = JSON.parse(data.data);\n        var vehicleData = eventData.vehicleData;\n        console.log(\"vdata \", vehicleData);\n        if(eventData.event == \"reset\"){\n          console.log(\"reset\");\n          setVehicleList(vehicleData);\n        }\n        if(eventData.event == \"update\"){\n          console.log(\"update\");\n          setVehicleList(vehicleData[0]);\n        }\n\n      };\n      evtSource.onerror = function (error) {\n        console.error('EventSource error:', error);\n      };\n      //close out event subscription on close of component\n      return () => {\n        evtSource.close();\n      };\n    },[]);\n}\n\n\n\nexport default Vehicles;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,KAAKC,EAAE,MAAM,IAAI;AAIxB,IAAIC,WAAW,GAAG,iBAAiB;AACnC,IAAIC,kBAAkB,GAAG,iBAAiB;AAC1C,IAAIC,kBAAkB,GAAG,2BAA2B;AACpD,IAAIC,iBAAiB,GAAG,qBAAqB;AAE7C,SAASC,QAAQA,CAAAC,IAAA,EAAa;EAAAC,EAAA;EAAA,IAAZ;IAAEC;EAAO,CAAC,GAAAF,IAAA;EACxB,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMY,GAAG,GAAGH,MAAM,CAACI,OAAO;IAC1B,IAAIC,UAAU,GAAGb,EAAE,CAACc,MAAM,CAACH,GAAG,CAAC;IAC/BE,UAAU,CAACE,SAAS,CAAC,gBAAgB,CAAC,CACrCC,IAAI,CAACP,WAAW,CAAC,CACjBQ,IAAI,CACFC,KAAK,IAAK;MACTA,KAAK,CACJC,MAAM,CAAC,QAAQ,CAAC,CAChBC,IAAI,CAAC,IAAI,EAAE,UAASC,CAAC,EAACC,CAAC,EAAC;QAAC,OAAO,EAAE,GAAGA,CAAC,GAAG,EAAE;MAAA,CAAC,CAAC,CAC7CF,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CACfA,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAEjB,CAAC,EACAG,MAAM,IAAK;MACVA,MAAM,CAACH,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC;IACjC,CAAC,EACAI,IAAI,IAAK;MACRA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;IACnB,CACE,CAAC;EACH,CAAC,EAAE,CAAChB,WAAW,CAAC,CAAC;;EAEjB;EACAV,SAAS,CAAC,MAAM;IACd,MAAM2B,SAAS,GAAG,IAAIC,WAAW,CAAC,SAAS,GAAG1B,WAAW,GAAGC,kBAAkB,GAAGC,kBAAkB,CAAC;IACpGuB,SAAS,CAACE,SAAS,GAAIZ,IAAI,IAAK;MAC9B,IAAIa,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACf,IAAI,CAACA,IAAI,CAAC;MACrC,IAAIgB,WAAW,GAAGH,SAAS,CAACG,WAAW;MACvCC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,WAAW,CAAC;MAClC,IAAGH,SAAS,CAACM,KAAK,IAAI,OAAO,EAAC;QAC5BF,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;QACpBxB,cAAc,CAACsB,WAAW,CAAC;MAC7B;MACA,IAAGH,SAAS,CAACM,KAAK,IAAI,QAAQ,EAAC;QAC7BF,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;QACrBxB,cAAc,CAACsB,WAAW,CAAC,CAAC,CAAC,CAAC;MAChC;IAEF,CAAC;IACDN,SAAS,CAACU,OAAO,GAAG,UAAUC,KAAK,EAAE;MACnCJ,OAAO,CAACI,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C,CAAC;IACD;IACA,OAAO,MAAM;MACXX,SAAS,CAACY,KAAK,CAAC,CAAC;IACnB,CAAC;EACH,CAAC,EAAC,EAAE,CAAC;AACT;AAAC/B,EAAA,CAnDQF,QAAQ;AAAAkC,EAAA,GAARlC,QAAQ;AAuDjB,eAAeA,QAAQ;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}