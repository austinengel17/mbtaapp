{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nvar backendHost = \"localhost:8080/\";\nvar controllerEndpoint = \"mbta/v1/livemap\";\nvar vehiclePositionSub = \"/vehicle/location/Green-E\";\nvar mbtaStopsEndpoint = \"/stops/line/Green-E\";\nfunction Vehicles(_ref) {\n  _s();\n  let {\n    svgRef,\n    stationData,\n    stationMapping\n  } = _ref;\n  const [vehicleList, setVehicleList] = useState([]);\n  useEffect(() => {\n    const svg = svgRef.current;\n    var svgElement = d3.select(svg);\n    console.log(\"vdata \", vehicleList);\n    svgElement.selectAll(\"rect\").data(vehicleList, d => d.id).join(enter => {\n      // enter\n      // .append(\"text\")\n      // .attr(\"class\", \"vehicle\")\n      // // .attr(\"key\", d=>d.id)\n      // .attr(\"x\", function(d,i){return 30 + i * 130})\n      // .attr(\"y\", 300)\n      // .attr(\"font-size\", 5)\n      // .text(function(d){return d.id + \" - \" + d.currentStatus});\n      enter.append(\"rect\").attr(\"x\", function (d, i) {\n        var stopId = d.stopId;\n        var stopName = stationMapping[stopId];\n        var station = svgElement.selectAll(\"#\" + stopName);\n        var circlePosition = station.node().getBoundingClientRect();\n        return +circlePosition.left + window.pageXOffset;\n      }).attr(\"y\", 150).attr(\"width\", 5).attr(\"height\", 5);\n    }, update => {\n      update.attr(\"x\", function (d, i) {\n        var stopId = d.stopId;\n        var stopName = stationMapping[stopId];\n        var station = svgElement.selectAll(\"#\" + stopName);\n        var circlePosition = station.node().getBoundingClientRect();\n        return +circlePosition.left + window.pageXOffset;\n      });\n    }, exit => {\n      exit.remove();\n    });\n  }, [vehicleList]);\n\n  //Load vehicles below\n  useEffect(() => {\n    const evtSource = new EventSource(\"http://\" + backendHost + controllerEndpoint + vehiclePositionSub);\n    evtSource.onmessage = data => {\n      var eventData = JSON.parse(data.data);\n      var vehicleData = eventData.vehicleData;\n      if (eventData.event == \"reset\") {\n        console.log(\"reset\");\n        setVehicleList(vehicleData);\n      } else if (eventData.event == \"update\") {\n        setVehicleList(prevList => {\n          var newData = prevList.map(item => {\n            if (item.id === vehicleData[0].id && !(item.currentStatus === vehicleData[0].currentStatus)) {\n              return vehicleData[0];\n            }\n            return item;\n          });\n          console.log(\"update\", newData);\n          return newData;\n        });\n        // setVehicleList(vehicleData);\n      }\n    };\n\n    evtSource.onerror = function (error) {\n      console.error('EventSource error:', error);\n    };\n    //close out event subscription on close of component\n    return () => {\n      evtSource.close();\n    };\n  }, []);\n}\n_s(Vehicles, \"O5rYaccuuWUrmMdgP7AwnaNzsfc=\");\n_c = Vehicles;\nexport default Vehicles;\nvar _c;\n$RefreshReg$(_c, \"Vehicles\");","map":{"version":3,"names":["useState","useEffect","d3","backendHost","controllerEndpoint","vehiclePositionSub","mbtaStopsEndpoint","Vehicles","_ref","_s","svgRef","stationData","stationMapping","vehicleList","setVehicleList","svg","current","svgElement","select","console","log","selectAll","data","d","id","join","enter","append","attr","i","stopId","stopName","station","circlePosition","node","getBoundingClientRect","left","window","pageXOffset","update","exit","remove","evtSource","EventSource","onmessage","eventData","JSON","parse","vehicleData","event","prevList","newData","map","item","currentStatus","onerror","error","close","_c","$RefreshReg$"],"sources":["/Users/austin/Dev Projects/mbtaapp/mbta-frontend/src/Vehicles.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\n\n\nvar backendHost = \"localhost:8080/\";\nvar controllerEndpoint = \"mbta/v1/livemap\";\nvar vehiclePositionSub = \"/vehicle/location/Green-E\";\nvar mbtaStopsEndpoint = \"/stops/line/Green-E\";\n\nfunction Vehicles({ svgRef, stationData, stationMapping}) { \n    const [vehicleList, setVehicleList] = useState([]);\n\n    useEffect(() => {\n      const svg = svgRef.current;\n      var svgElement = d3.select(svg);\n       console.log(\"vdata \", vehicleList);\n      svgElement.selectAll(\"rect\")\n      .data(vehicleList, d=>d.id)\n      .join(\n        (enter) => {\n          // enter\n          // .append(\"text\")\n          // .attr(\"class\", \"vehicle\")\n          // // .attr(\"key\", d=>d.id)\n          // .attr(\"x\", function(d,i){return 30 + i * 130})\n          // .attr(\"y\", 300)\n          // .attr(\"font-size\", 5)\n          // .text(function(d){return d.id + \" - \" + d.currentStatus});\n          enter.append(\"rect\")\n            .attr(\"x\", function(d,i){\n              var stopId = d.stopId;\n              var stopName = stationMapping[stopId];\n              var station = svgElement.selectAll(\"#\" + stopName)\n              var circlePosition = station.node().getBoundingClientRect();\n              return +circlePosition.left + window.pageXOffset;\n            })\n            .attr(\"y\",150)\n            .attr(\"width\", 5)\n            .attr(\"height\", 5);\n      },\n      (update) => {\n        update.attr(\"x\", function(d,i){\n              var stopId = d.stopId;\n              var stopName = stationMapping[stopId];\n              var station = svgElement.selectAll(\"#\" + stopName)\n              var circlePosition = station.node().getBoundingClientRect();\n              return +circlePosition.left + window.pageXOffset;\n        });\n      },\n      (exit) => {\n        exit.remove(); \n    } \n      );\n    }, [vehicleList]);\n\n    //Load vehicles below\n    useEffect(() => {\n      const evtSource = new EventSource(\"http://\" + backendHost + controllerEndpoint + vehiclePositionSub);\n      evtSource.onmessage = (data) => {\n        var eventData = JSON.parse(data.data);\n        var vehicleData = eventData.vehicleData;\n        if(eventData.event == \"reset\"){\n          console.log(\"reset\");\n          setVehicleList(vehicleData);\n        } else if(eventData.event == \"update\"){\n          setVehicleList((prevList) => {\n          var newData = prevList.map((item) => {\n            if (item.id === vehicleData[0].id && !(item.currentStatus === vehicleData[0].currentStatus)) {\n              return vehicleData[0];\n            }\n            return item;\n          });\n          console.log(\"update\", newData);\n          return newData;\n        });\n        // setVehicleList(vehicleData);\n        }\n\n      };\n      evtSource.onerror = function (error) {\n        console.error('EventSource error:', error);\n      };\n      //close out event subscription on close of component\n      return () => {\n        evtSource.close();\n      };\n    },[]);\n}\n\n\n\nexport default Vehicles;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}